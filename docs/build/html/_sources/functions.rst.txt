=======
Функции
=======

-------------------------------------------
Нормализцая страны - normalize_country_name
-------------------------------------------

**normalize_country_name(posname, dif_acc=0.7)**

Принимает на вход один обязательный параметр **posname** (от "possible name") типа **string** - нормализуемое название, и один необязательный - **dif_acc** (от differency accurate) типа **float** - параметр точности при поиске подходящего ключа в библиотеке, принимающий значения от 0.0 до 1.0 (по умолчанию - 0.7).

В функции преобразуется входная строка **posname** и находится ближайший по расстоянию между строками ключ (**dif_acc** определяет минимальное расстояние, при котором строки считаются похожими). Для этого предпринимаются следующие шаги:

#. Удаление пунктуации и приведение к нижнему регистру: 

    Из входной строки **posname** удаляются символы, обозначающие пунктуацию, не используемые в названиях стран. Для реализации используется список символов пунктуации, чтобы избежать конфликтов с национальными символами для различных языков. Иной возможный способ реализации - регулярное выражение. Также **posname** приводится к нижнему регистру, что позволяет сравнивать его с ключами (которые все записаны в нижнем регистре). Таким образом достигается нечувствительность к регистру входной строки.
#. Поиск совпадения всей строки:

    * И ключа с приоритетом "1":

         С помощью функции **get_close_matches** из модуля **difflib** стандартной библиотеки языка Python находим для строки **posname**  ближайший по расстоянию между строками ключ из нашей базы данных. При этом проверяем разность длин совпавшего ключа и входной строки. Если эта разность по модулю не больше 1, то есть длины примерно равны, то значение по полученному ключу возвращается функцией и ее работа прекращается.
	
    * И ключа с приоритетом "2":

         Аналогично, различие только в приоритете.
#. Разбиение входной строки на слова (разделитель - ' ')

#. Поиск совпадения для слов из входной строки:

    * И ключа с приоритетом "1". При этом:

        * Длины ключа и слова примерно равны

            Если найден такой ключ, то функция возвращает значение по этому ключу и завершает работу. Если нет, то выполнение продолжается по порядку.

        * Длины ключа и слова не равны

    * И ключа с приоритетом "2". При этом:

        * Длины ключа и слова примерно равны

        * Длины ключа и слова не равны

#. Завершение работы - совпадения не найдено
    Если функция дошла до этого этапа, значит для входной строки не существует похожего ключа из базы данных, поэтому мы не можем точно сказать, какая страна имелась в виду, и функция возвращает строку **None**. Так же функция возвращает **None**, если при ее выполнении было вызвано какое-либо исключение.

Такая структура позволяет охватить многие возможные опечатки и странные варианты. Например, удаление символов пунктуации позволяет корректно определить страну в случаях "America!!!" и "-_United_Kingdom_-", а приоритет ключей разрешает ситуации типа "американского Парижа" - по запросу "Paris, US" функция вернет "Unated States". 